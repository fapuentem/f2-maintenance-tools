#+TITLE: F2 Smart Controller Health Report
#+SUBTITLE: F2-<MAC_ADDRESS>
#+AUTHOR: Fabricio Puente M.
#+EMAIL: fpuentem@visiontechconsulting.ca
#+DATE: <2025-04-07 Mon>
#+EXCLUDE_TAGS: noexport
#+OPTIONS: email:t tags:nil toc:nil
#+EXPORT_FILE_NAME: check-status
#+PROPERTY: header-args:sh :results output replace :exports both

* README :noexport:

This is a literate document that can create a health status of the F2 Smart Controller SoM,
automatically it get the MAC address and update its content.

This document will differ slightly depending in which F2 you run it. The exported version in HTML
provides a detailed report the health of the device.

#+NAME: update_mac_address
#+BEGIN_SRC elisp :results none :eval never-export :var board-ver="v3.1"
  (defun net-mac-no-colon (iface)
    "Return IFACE's MAC address as 12 lowercase hex chars (no colons).
  On Linux, reads /sys/class/net/IFACE/address. Falls back to `ip` or `ifconfig`."
    (interactive
     (list (completing-read "Interface: " (mapcar #'symbol-name (network-interface-list)))))
    (let* ((sys-path (format "/sys/class/net/%s/address" iface))
           (raw
            (cond
             ;; Linux: /sys
             ((file-readable-p sys-path)
              (string-trim (with-temp-buffer
                             (insert-file-contents sys-path)
                             (buffer-string))))
             ;; ip(8)
             ((executable-find "ip")
              (with-temp-buffer
                (call-process "ip" nil t nil "link" "show" "dev" iface)
                (goto-char (point-min))
                (when (re-search-forward
                       ;; matches: "link/ether aa:bb:cc:dd:ee:ff"
                       "\\blink/ether\\s-+\\([0-9A-Fa-f:]+\\)" nil t)
                  (match-string 1))))
             ;; ifconfig
             ((executable-find "ifconfig")
              (with-temp-buffer
                (call-process "ifconfig" nil t nil iface)
                (goto-char (point-min))
                (when (re-search-forward
                       ;; matches: "ether aa:bb:cc:dd:ee:ff"
                       "\\beth(?:her)?\\s-+\\([0-9A-Fa-f:]+\\)" nil t)
                  (match-string 1))))))
           (hex (and raw (replace-regexp-in-string ":" "" (downcase raw)))))
      (unless (and hex (= (length hex) 12) (string-match-p "\\`[0-9a-f]\\{12\\}\\'" hex))
        (user-error "Could not obtain a valid MAC for %s" iface))
      (when (called-interactively-p 'interactive)
        (message "%s" hex))
      hex))

  (defun f2-board->iface (board-ver)
    "Map BOARD-VER (string) to the network interface name."
    (or (alist-get board-ver
                 '(("v3.1" . "eth1")
                   ("v3.0" . "eth2")
                   ("v2.1" . "eth2")
                   ("v2.0" . "eth0"))
                 nil nil #'string=)
      (user-error "Unknown board version: %s" board-ver)))

   (let* ((iface (f2-board->iface board-ver))
          (mac (net-mac-no-colon iface)))
        (save-excursion
          (goto-char (point-min))
          (when (re-search-forward "^#\\+SUBTITLE:.*" nil t)
            (replace-match (concat "#+SUBTITLE: " (format "f2-%s" mac))))
          (when (re-search-forward "^#\\+DATE:.*" nil t)
            (replace-match (concat "#+DATE: " (org-insert-time-stamp (current-time) t))))
          (when (re-search-forward "^#\\+EXPORT_FILE_NAME:.*" nil t)
            (replace-match (format "#+EXPORT_FILE_NAME: f2-%s-report" mac)))))
#+END_SRC

* Code :noexport:

#+NAME: startup
#+begin_src elisp :results none
  (load-theme 'modus-vivendi)
  (setf fill-column 100)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src

* System Resource Monitoring

- CPU Usage:

  #+BEGIN_SRC sh
    top -bn1 | grep '^%Cpu' | awk '{print $2}'
  #+END_SRC

   #+RESULTS:

- Memory Usage:

  #+BEGIN_SRC sh
    free -h
  #+END_SRC

   #+RESULTS:

- Disk Usage:
  #+BEGIN_SRC sh
    df -h
  #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example

- Disk I/O:
   #+BEGIN_SRC sh
     iostat -d -k 1 1
   #+END_SRC

   #+RESULTS:

- Network Interface Status:
   #+BEGIN_SRC sh
     ip a
   #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example

   #+BEGIN_SRC sh
     netstat -s | grep -i 'error\\|drop'
   #+END_SRC

   #+RESULTS:

* Jetson Specific Monitoring
- GPU Usage:

  #+BEGIN_SRC sh
    tegrastats | head -1
  #+END_SRC

  #+RESULTS:

- Thermal Monitoring:

  #+BEGIN_SRC sh
    tegrastats | head  -1 | awk '{print $1,$2,$17,$18,$19.$20,$21,$22,$23,$24,$25}'
  #+END_SRC

  #+RESULTS:

** Application Specific Monitoring
*** F2 App

- Application Process Status (<F2 App>):

  #+BEGIN_SRC sh
    pids=$(pgrep -f "F2-App" | grep -v "sh -c")
    if [ -z "$pids" ]; then
          echo "F2-App process is not running."
    else
          echo "F2-App is running with PID(s): $pids"
    fi
  #+END_SRC

   #+RESULTS:

 - Application Logs (<F2 App>):

   #+BEGIN_SRC sh
     tail -n 10 /home/nvidia/projects/F2-App/logs/app.log
   #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example

 - Application Resource Usage (<F2 App>):

    #+BEGIN_SRC sh
     ps -aux | grep F2-App
   #+END_SRC

   #+RESULTS:

*** F2 App fanstel ble

- Application Process Status (<F2 App fanstel ble>):

  #+BEGIN_SRC sh
    pids=$(pgrep -f "F2_App_fanstel_ble" | grep -v "sh -c")
    if [ -z "$pids" ]; then
          echo "F2_App_fanstel_ble process is not running."
    else
          echo "F2_App_fanstel_ble is running with PID(s): $pids"
    fi
  #+END_SRC

   #+RESULTS:

 - Application Logs (<F2 App fanstelble>):

   #+BEGIN_SRC sh
     tail -n 20 /home/nvidia/projects/F2_App_fanstel_ble/logs/ble-app.log
   #+END_SRC

   #+RESULTS:

 - Application Resource Usage (<F2 App fanstel ble>):

   #+BEGIN_SRC sh
     ps -aux | grep F2_App_fanstel_ble
   #+END_SRC

   #+RESULTS:

*** F2 Crowd Scanning

 - Application Process Status (<F2 Crowd Scanning>):

   #+BEGIN_SRC sh
     pids=$(pgrep -f "F2_Crowd_Scanning" | grep -v "sh -c")
     if [ -z "$pids" ]; then
           echo "F2_Crowd_Scanning process is not running."
     else
         echo "F2_Crowd_Scanning is running with PID(s): $pids"
     fi
   #+END_SRC

   #+RESULTS:

 - Application Logs (<F2 Crowd Scanning>):

   #+BEGIN_SRC sh
     tail -n 20 /home/nvidia/projects/F2_Crowd_Scanning/logs/app.log
   #+END_SRC

   #+RESULTS:

 - Application Resource Usage (<F2 Crowd Scanning>):

   #+BEGIN_SRC sh
     ps -aux | grep F2_Crowd_Scanning
   #+END_SRC

   #+RESULTS:

** System Health and Configuration

- System Uptime:

   #+BEGIN_SRC sh
     uptime
   #+END_SRC

   #+RESULTS:

 - System Logs (Errors):

   #+BEGIN_SRC sh
     journalctl -p err | tail -25
   #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example

# Local Variables:
# org-confirm-babel-evaluate: (lambda (lang body) (not (string= lang "elisp")))
# eval: (progn
#         (when (fboundp 'org-babel-goto-named-src-block)
#           (org-babel-goto-named-src-block "startup")
#           (org-babel-execute-src-block)))
# End:
