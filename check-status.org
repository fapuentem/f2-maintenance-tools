#+TITLE: Monthly Jetson Orin Health Check
#+DATE: <2025-04-03 Thu>

#+PROPERTY: header-args:bash :results output replace
#+PROPERTY: header-args:sh :results output replace

* Device:
#+NAME: get-f2-id
#+BEGIN_SRC bash
  get_formatted_mac() {
    # Extract MAC address from 'ifconfig' command's output
    local mac_address=$(ifconfig eth0 | grep 'ether' | awk '{print $2}')

    # Replace ':' with nothing to get the required format
    local formatted_mac_address=$(echo "$mac_address" | tr -d ':')

    # Add 'f2_' prefix to the MAC address
    local result="f2_$formatted_mac_address"

    # Print the result (useful for capturing return value)
    echo "$result"
   }
  # Get F2 id
  # get_formatted_mac
  f2_formatted_mac=$(get_formatted_mac)
  echo "$f2_formatted_mac"
#+END_SRC

#+RESULTS: get-f2-id



** System Resource Monitoring [0/5]
- [ ] CPU Usage:
   #+BEGIN_SRC bash
     top -bn1 | grep '^%Cpu' | awk '{print $2}'
   #+END_SRC

   #+RESULTS:

- [ ] Memory Usage:
   #+BEGIN_SRC sh
     free -h
   #+END_SRC

   #+RESULTS:

- [ ] Disk Usage:
   #+BEGIN_SRC sh
     df -h
   #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example

- [ ] Disk I/O:
   #+BEGIN_SRC bash
     iostat -d -k 1 1
   #+END_SRC

   #+RESULTS:

- [ ] Network Interface Status:
   #+BEGIN_SRC bash
     ip a
   #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example

   #+BEGIN_SRC bash
     netstat -s | grep -i 'error\\|drop'
   #+END_SRC

   #+RESULTS:

** Jetson Specific Monitoring [0/2]
- [ ] GPU Usage:
  #+BEGIN_SRC bash
    tegrastats | head -1
  #+END_SRC

  #+RESULTS:

- [ ] Thermal Monitoring:
  #+BEGIN_SRC bash
    tegrastats | head  -1 | awk '{print $17,$18,$19.$20,$21,$22,$23,$24,$25}'
  #+END_SRC

  #+RESULTS:

** Application Specific Monitoring
*** F2_App
 - [ ] Application Process Status (<F2_App>):
   #+BEGIN_SRC bash
     pids=$(pgrep -f "F2-App" | grep -v "sh -c")
     if [ -z "$pids" ]; then
           echo "F2-App process is not running."
     else
           echo "F2-App is running with PID(s): $pids"
     fi
   #+END_SRC

   #+RESULTS:

 - [ ] Application Logs (<F2_App>):
   #+BEGIN_SRC bash
     tail -n 10 /home/nvidia/projects/F2-App/logs/app.log
   #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example

 - [ ] Application Resource Usage (<F2_App>):
   #+BEGIN_SRC bash
     ps -aux | grep F2-App
   #+END_SRC

   #+RESULTS:

*** F2_App_fanstel_ble
 - [ ] Application Process Status (<F2_App_fanstel_ble>):
   #+BEGIN_SRC bash
     pids=$(pgrep -f "F2_App_fanstel_ble" | grep -v "sh -c")
     if [ -z "$pids" ]; then
           echo "F2_App_fanstel_ble process is not running."
     else
           echo "F2_App_fanstel_ble is running with PID(s): $pids"
     fi
   #+END_SRC

   #+RESULTS:

 - [ ] Application Logs (<F2_App_fanstel_ble>):
   #+BEGIN_SRC bash
     tail -n 20 /home/nvidia/projects/F2_App_fanstel_ble/logs/ble-app.log
   #+END_SRC

   #+RESULTS:

 - [ ] Application Resource Usage (<F2_App_fanstel_ble>):
   #+BEGIN_SRC bash
     ps -aux | grep F2_App_fanstel_ble
   #+END_SRC

   #+RESULTS:

** System Health and Configuration
 - [ ] System Uptime:
   #+BEGIN_SRC bash
     uptime
   #+END_SRC

   #+RESULTS:

 - [ ] System Logs (Errors):
   #+BEGIN_SRC bash
     journalctl -p err | tail -25
   #+END_SRC

   #+RESULTS:
   #+begin_example

   #+end_example
